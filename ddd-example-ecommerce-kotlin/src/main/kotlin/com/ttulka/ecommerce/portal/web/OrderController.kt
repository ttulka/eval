package com.ttulka.ecommerce.portal.web

import com.ttulka.ecommerce.portal.PlaceOrderFromCart
import com.ttulka.ecommerce.portal.PlaceOrderFromCart.NoItemsToOrderException
import com.ttulka.ecommerce.portal.PrepareOrderDelivery
import com.ttulka.ecommerce.sales.cart.RetrieveCart
import com.ttulka.ecommerce.shipping.delivery.Address
import com.ttulka.ecommerce.shipping.delivery.Person
import com.ttulka.ecommerce.shipping.delivery.Place
import org.springframework.http.MediaType
import org.springframework.stereotype.Controller
import org.springframework.ui.Model
import org.springframework.web.bind.annotation.ExceptionHandler
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestMapping
import java.util.*
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse

/**
 * Web controller for Order use-cases.
 */
@Controller
@RequestMapping("/order")
internal class OrderController(
        private val retrieveCart: RetrieveCart,
        private val placeOrderFromCart: PlaceOrderFromCart,
        private val prepareOrderDelivery: PrepareOrderDelivery) {    

    @GetMapping
    fun index(): String = "order"

    @PostMapping(consumes = [MediaType.APPLICATION_FORM_URLENCODED_VALUE])
    fun place(name: String, address: String,
              request: HttpServletRequest, response: HttpServletResponse): String {
        val cart = retrieveCart.byId(CartIdFromCookies(request, response).cartId)

        // Order ID is generated by portal immediately when the purchase process begins.
        // This makes it possible to Prepare Delivery before an Order is placed.
        val orderId = UUID.randomUUID()

        // Neither order nor synchronous manner is not necessary here.
        // Place Order and Prepare Delivery are meant to be called from service-oriented widgets.
        placeOrderFromCart.placeOrder(orderId, cart)
        prepareOrderDelivery.prepareDelivery(orderId, Address(Person(name), Place(address)))

        cart.empty()

        return "redirect:/order/success"
    }

    @GetMapping("/success")
    fun success(request: HttpServletRequest, response: HttpServletResponse): String = "order-success"

    @GetMapping("/error")
    fun error(message: String, model: Model): String {
        model.addAttribute("messageCode", message)
        return "order-error"
    }

    @ExceptionHandler(NoItemsToOrderException::class, IllegalArgumentException::class)
    fun exception(ex: Exception): String = "redirect:/order/error?message=" + errorCode(ex)

    private fun errorCode(e: Exception): String =
        when (e) {
            is NoItemsToOrderException -> {
                "noitems"
            }
            is IllegalArgumentException -> {
                "requires"
            }
            else -> "default"
        }
}
